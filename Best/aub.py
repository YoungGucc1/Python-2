import sys
import os
import cv2
import numpy as np
import albumentations as A
import qdarkstyle # –ò–º–ø–æ—Ä—Ç –¥–ª—è —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
    QLabel, QLineEdit, QFileDialog, QSpinBox, QMessageBox, QStatusBar,
    QMainWindow
)
from PyQt6.QtCore import Qt, QThread, pyqtSignal
from PyQt6.QtGui import QIcon # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É

# --- –ü–æ—Ç–æ–∫ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ ---
class AugmentationWorker(QThread):
    progress_updated = pyqtSignal(int)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (–ø—Ä–æ—Ü–µ–Ω—Ç)
    status_updated = pyqtSignal(str)  # –°–∏–≥–Ω–∞–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    finished = pyqtSignal(bool, str)   # –°–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—É—Å–ø–µ—Ö?, —Å–æ–æ–±—â–µ–Ω–∏–µ)

    def __init__(self, input_path, output_dir, num_variations, augmentations):
        super().__init__()
        self.input_path = input_path
        self.output_dir = output_dir
        self.num_variations = num_variations
        self.augmentations = augmentations
        self._is_running = True

    def run(self):
        try:
            self.status_updated.emit(f"–ß—Ç–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {os.path.basename(self.input_path)}")
            image = cv2.imread(self.input_path)
            if image is None:
                raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {self.input_path}")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB, —Ç–∞–∫ –∫–∞–∫ albumentations —á–∞—Å—Ç–æ –æ–∂–∏–¥–∞–µ—Ç RGB
            image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

            base_filename = os.path.splitext(os.path.basename(self.input_path))[0]
            extension = os.path.splitext(self.input_path)[1] # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ

            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –≤—ã–≤–æ–¥–∞, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
            os.makedirs(self.output_dir, exist_ok=True)
            self.status_updated.emit(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤: {self.output_dir}")

            for i in range(self.num_variations):
                if not self._is_running:
                    self.status_updated.emit("–ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ—Ä–≤–∞–Ω.")
                    self.finished.emit(False, "–ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    return

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
                augmented = self.augmentations(image=image)
                augmented_image = augmented['image']

                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ BGR –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenCV
                augmented_image_bgr = cv2.cvtColor(augmented_image, cv2.COLOR_RGB2BGR)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
                output_filename = f"{base_filename}_aug_{i+1:04d}{extension}"
                output_path = os.path.join(self.output_dir, output_filename)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                success = cv2.imwrite(output_path, augmented_image_bgr)
                if not success:
                     self.status_updated.emit(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {output_filename}")
                     # –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–ª–∏ –ø—Ä–µ—Ä–≤–∞—Ç—å - –ø–æ–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                # else:
                #     self.status_updated.emit(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output_filename}") # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                progress = int(((i + 1) / self.num_variations) * 100)
                self.progress_updated.emit(progress)
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã GUI —É—Å–ø–µ–≤–∞–ª –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                # self.msleep(10)

            if self._is_running:
                self.status_updated.emit(f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ. –°–æ–∑–¥–∞–Ω–æ {self.num_variations} –≤–∞—Ä–∏–∞—Ü–∏–π.")
                self.finished.emit(True, f"–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {self.num_variations} –≤–∞—Ä–∏–∞—Ü–∏–π.")

        except Exception as e:
            error_message = f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏: {e}"
            self.status_updated.emit(error_message)
            self.finished.emit(False, error_message)

    def stop(self):
        self._is_running = False
        self.status_updated.emit("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞...")

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
class AugmentationApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π –¥–ª—è YOLO")
        self.setGeometry(100, 100, 600, 250) # x, y, width, height

        # --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
        self.input_image_path = ""
        self.output_directory = ""
        self.worker = None # –î–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞

        # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–π ---
        # –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —ç—Ç–æ—Ç –ø–∞–π–ø–ª–∞–π–Ω –ø–æ–¥ –≤–∞—à–∏ –Ω—É–∂–¥—ã!
        # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
        self.augmentation_pipeline = A.Compose([
            A.HorizontalFlip(p=0.5),
            A.RandomBrightnessContrast(brightness_limit=0.2, contrast_limit=0.2, p=0.7),
            A.HueSaturationValue(hue_shift_limit=10, sat_shift_limit=30, val_shift_limit=20, p=0.5),
            A.GaussNoise(var_limit=(10.0, 50.0), p=0.3),
            A.GaussianBlur(blur_limit=(3, 7), p=0.3),
            # A.ISONoise(color_shift=(0.01, 0.05), intensity=(0.1, 0.5), p=0.2), # –ò–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω
            A.ShiftScaleRotate(shift_limit=0.06, scale_limit=0.1, rotate_limit=15, p=0.6, border_mode=cv2.BORDER_CONSTANT, value=0), # –ß–µ—Ä–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
            # A.Perspective(scale=(0.05, 0.1), keep_size=True, p=0.3), # –ú–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ –∏—Å–∫–∞–∂–∞—Ç—å, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ
            A.CoarseDropout(max_holes=8, max_height=16, max_width=16, min_holes=1, min_height=8, min_width=8, fill_value=0, p=0.2), # –ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π
             A.OneOf([ # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω –∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ —Ä–∞–∑–º—ã—Ç–∏—è
                 A.MotionBlur(blur_limit=7, p=1.0),
                 A.MedianBlur(blur_limit=5, p=1.0),
                 A.Blur(blur_limit=5, p=1.0),
             ], p=0.3),
             A.OneOf([ # –ü—Ä–∏–º–µ–Ω–∏—Ç—å –æ–¥–∏–Ω –∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –∫–∞—á–µ—Å—Ç–≤–∞
                 A.ImageCompression(quality_lower=75, quality_upper=95, p=1.0),
                 # A.Downscale(scale_min=0.75, scale_max=0.95, p=1.0), # –ú–æ–∂–µ—Ç —É–º–µ–Ω—å—à–∞—Ç—å —Ä–∞–∑–º–µ—Ä
             ], p=0.2)
        ])

        # --- –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–¥–∂–µ—Ç–æ–≤ ---
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)

        # --- –í—ã–±–æ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ---
        input_layout = QHBoxLayout()
        self.input_label = QLabel("–í—Ö–æ–¥–Ω–æ–µ —Ñ–æ—Ç–æ:")
        self.input_path_edit = QLineEdit()
        self.input_path_edit.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        self.input_path_edit.setReadOnly(True)
        self.input_button = QPushButton("–û–±–∑–æ—Ä...")
        input_layout.addWidget(self.input_label)
        input_layout.addWidget(self.input_path_edit)
        input_layout.addWidget(self.input_button)
        main_layout.addLayout(input_layout)

        # --- –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è ---
        output_layout = QHBoxLayout()
        self.output_label = QLabel("–ü–∞–ø–∫–∞ –≤—ã–≤–æ–¥–∞:")
        self.output_path_edit = QLineEdit()
        self.output_path_edit.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è...")
        self.output_path_edit.setReadOnly(True)
        self.output_button = QPushButton("–û–±–∑–æ—Ä...")
        output_layout.addWidget(self.output_label)
        output_layout.addWidget(self.output_path_edit)
        output_layout.addWidget(self.output_button)
        main_layout.addLayout(output_layout)

        # --- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞—Ü–∏–π ---
        variations_layout = QHBoxLayout()
        self.variations_label = QLabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞—Ü–∏–π:")
        self.variations_spinbox = QSpinBox()
        self.variations_spinbox.setRange(1, 10000) # –û—Ç 1 –¥–æ 10000 –≤–∞—Ä–∏–∞—Ü–∏–π
        self.variations_spinbox.setValue(50)       # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.variations_spinbox.setFixedWidth(100)
        variations_layout.addWidget(self.variations_label)
        variations_layout.addWidget(self.variations_spinbox)
        variations_layout.addStretch() # –ó–∞–ø–æ–ª–Ω—è–µ—Ç –ø—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–ø—Ä–∞–≤–∞
        main_layout.addLayout(variations_layout)

        # --- –ö–Ω–æ–ø–∫–∞ –°—Ç–∞—Ä—Ç ---
        self.start_button = QPushButton("üöÄ –ù–∞—á–∞—Ç—å –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é")
        self.start_button.setFixedHeight(40) # –°–¥–µ–ª–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–≤—ã—à–µ
        main_layout.addWidget(self.start_button)

        # --- –°—Ç–∞—Ç—É—Å –±–∞—Ä ---
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤.")

        # --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ –∫ —Å–ª–æ—Ç–∞–º ---
        self.input_button.clicked.connect(self.select_input_image)
        self.output_button.clicked.connect(self.select_output_dir)
        self.start_button.clicked.connect(self.start_augmentation_process)

        # --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
        # self.setWindowIcon(QIcon("path/to/your/icon.png"))

    # --- –°–ª–æ—Ç—ã (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π) ---
    def select_input_image(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            "", # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg *.bmp *.webp)"
        )
        if file_path:
            self.input_image_path = file_path
            self.input_path_edit.setText(file_path)
            self.status_bar.showMessage(f"–í—ã–±—Ä–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {os.path.basename(file_path)}")

    def select_output_dir(self):
        dir_path = QFileDialog.getExistingDirectory(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
            "" # –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
        )
        if dir_path:
            self.output_directory = dir_path
            self.output_path_edit.setText(dir_path)
            self.status_bar.showMessage(f"–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞: {dir_path}")

    def start_augmentation_process(self):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not self.input_image_path:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
            return
        if not os.path.exists(self.input_image_path):
             QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.input_image_path}")
             return
        if not self.output_directory:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
            return

        num_variations = self.variations_spinbox.value()

        # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç–∞ –≤–æ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
        self.start_button.setEnabled(False)
        self.start_button.setText("–í –ø—Ä–æ—Ü–µ—Å—Å–µ...")

        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫
        self.worker = AugmentationWorker(
            self.input_image_path,
            self.output_directory,
            num_variations,
            self.augmentation_pipeline
        )
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –ø–æ—Ç–æ–∫–∞ –∫ —Å–ª–æ—Ç–∞–º GUI
        self.worker.status_updated.connect(self.update_status)
        self.worker.progress_updated.connect(self.update_progress) # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –≤ —Å—Ç–∞—Ç—É—Å
        self.worker.finished.connect(self.on_augmentation_finished)
        self.worker.start()

    def update_status(self, message):
        self.status_bar.showMessage(message)

    def update_progress(self, percentage):
         self.status_bar.showMessage(f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: {percentage}%")
         # –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å QProgressBar

    def on_augmentation_finished(self, success, message):
        # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–æ
        self.start_button.setEnabled(True)
        self.start_button.setText("üöÄ –ù–∞—á–∞—Ç—å –ê—É–≥–º–µ–Ω—Ç–∞—Ü–∏—é")
        self.worker = None # –û—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Ç–æ–∫

        if success:
            QMessageBox.information(self, "–ó–∞–≤–µ—Ä—à–µ–Ω–æ", message)
        else:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", message)
        self.status_bar.showMessage("–ì–æ—Ç–æ–≤." if success else f"–û—à–∏–±–∫–∞: {message}")

    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞, —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫, –µ—Å–ª–∏ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç
    def closeEvent(self, event):
        if self.worker and self.worker.isRunning():
            reply = QMessageBox.question(self, '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã—Ö–æ–¥–∞',
                                         "–ü—Ä–æ—Ü–µ—Å—Å –∞—É–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –µ—â–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
                                         QMessageBox.StandardButton.Yes | QMessageBox.StandardButton.No,
                                         QMessageBox.StandardButton.No)

            if reply == QMessageBox.StandardButton.Yes:
                self.worker.stop() # –ü–æ—Å—ã–ª–∞–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ç–æ–∫—É
                self.worker.wait(500) # –î–∞–µ–º –ø–æ—Ç–æ–∫—É –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                event.accept() # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
            else:
                event.ignore() # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ
        else:
            event.accept() # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ


# --- –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    app = QApplication(sys.argv)

    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—ã–π —Å—Ç–∏–ª—å
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ qdarkstyle —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install qdarkstyle pyqt6
    try:
        # –£–∫–∞–∑—ã–≤–∞–µ–º API —è–≤–Ω–æ, —Ç.–∫. qdarkstyle –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ
        app.setStyleSheet(qdarkstyle.load_stylesheet(qt_api='pyqt6'))
    except ImportError:
        print("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: qdarkstyle –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ç–µ–º–∞.")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–∞–∑–æ–≤—ã–π —Ç–µ–º–Ω—ã–π —Å—Ç–∏–ª—å –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ qdarkstyle –Ω–µ—Ç
        # app.setStyleSheet("QWidget { background-color: #333; color: #EEE; } ...")
    except Exception as e:
         print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–µ–º–Ω—ã–π —Å—Ç–∏–ª—å: {e}")


    window = AugmentationApp()
    window.show()
    sys.exit(app.exec())